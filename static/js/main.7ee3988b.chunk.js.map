{"version":3,"sources":["logo.svg","Components/CardItem.js","Components/Card.js","Components/Achievements.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardItem","props","className","style","backgroundImage","bg","title","rating","subTitle","released","Card","state","page","isLoaded","Games","AddPage","bind","fetch","this","then","resp","json","data","console","log","setState","answer","name","sub","results","map","game","index","includes","split","pop","key","id","to","slug","textDecoration","background_image","onClick","Component","Achievements","img","Game","gameDetails","achievementsLoaded","achievements","match","params","gameID","url","esrb","statuses","Object","entries","added_by_status","esrb_rating","tags","splice","tag","result","genres","genre","description_raw","ratings","percent","status","item","image","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ee3988b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction CardItem(props) {\r\n  return (\r\n    <div className=\"card-item\">\r\n      <div\r\n        className=\"game-backdrop\"\r\n        style={{ backgroundImage: `url(${props.bg})` }}\r\n      ></div>\r\n      <div className=\"game-text\">\r\n        <h1 className=\"game-title\">{props.title}</h1>\r\n        <p className=\"game-rating\">{props.rating}</p>\r\n        <h2 className=\"title-details\">{props.subTitle}</h2>\r\n        <p className=\"released-by\">Released {props.released}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default CardItem;\r\n","import React, { Component } from \"react\";\r\nimport CardItem from \"./CardItem\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      page: 1,\r\n      isLoaded: false,\r\n      Games: null\r\n    };\r\n    this.AddPage = this.AddPage.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    fetch(`https://api.rawg.io/api/games?page=${this.state.page}`)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        this.setState({\r\n          isLoaded: true,\r\n          Games: data\r\n        });\r\n      });\r\n  }\r\n  componentWillUpdate() {\r\n    console.log(\"red\");\r\n  }\r\n  AddPage() {\r\n    this.state.page += 1;\r\n    this.setState({\r\n      page: this.state.page\r\n    });\r\n\r\n    fetch(`https://api.rawg.io/api/games?page=${this.state.page}`)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          Games: data\r\n        });\r\n      });\r\n    console.log(this.state.Games);\r\n  }\r\n\r\n  render() {\r\n    let GamesArr;\r\n    let answer, name, sub;\r\n    if (this.state.isLoaded) {\r\n      answer = this.state.Games.results.map((game, index) => {\r\n        if (game.name.includes(\":\")) {\r\n          name = game.name.split(\":\")[0];\r\n          sub = game.name.split(\":\").pop();\r\n        } else {\r\n          name = game.name;\r\n          sub = \"\";\r\n        }\r\n\r\n        return (\r\n          <Link\r\n            key={game.id}\r\n            to={`/game/${game.slug}`}\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            <CardItem\r\n              bg={game.background_image}\r\n              subTitle={sub}\r\n              title={name}\r\n              released={game.released}\r\n              rating=\"4.5\"\r\n            />\r\n          </Link>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"card\">\r\n        <h1 className=\"card-title\">Games</h1>\r\n\r\n        <div className=\"card-grid\">{answer}</div>\r\n        <div className=\"paginate\">\r\n          <button onClick={this.AddPage} className=\"next-page-btn\">\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Card;\r\n","import React from \"react\";\r\nconst Achievements = props => {\r\n  return (\r\n    <div className=\"game-achievement\">\r\n      <div\r\n        style={{\r\n          backgroundImage: `url(${props.img})`\r\n        }}\r\n        className=\"achievement-img\"\r\n      ></div>\r\n      <h1 className=\"achievement-name\">{props.name}</h1>\r\n      {/* <p className=\"achievement-description\">{props.description}</p> */}\r\n    </div>\r\n  );\r\n};\r\nexport default Achievements;\r\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport Achievements from \"./Achievements\";\r\n// function Game(props) {\r\n//   console.log(props.match.params.gameID);\r\n//   return <div>{props.match.params.gameID}</div>;\r\n// }\r\n// export default Game;\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      gameDetails: [],\r\n      achievementsLoaded: false,\r\n      achievements: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let slug = this.props.match.params.gameID;\r\n    let url = `https://api.rawg.io/api/games/${slug}`;\r\n    fetch(`https://api.rawg.io/api/games/${slug}/achievements`)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        this.setState({\r\n          achievementsLoaded: true,\r\n          achievements: data.results\r\n        });\r\n      });\r\n\r\n    fetch(url)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        console.log(data);\r\n\r\n        let statuses = Object.entries(data.added_by_status);\r\n\r\n        let esrb;\r\n\r\n        data.esrb_rating != null ? (esrb = data.esrb_rating.name) : (esrb = \"\");\r\n        let tags = data.tags.splice(4, 5).map((tag, index) => {\r\n          return (\r\n            <button key={index} className=\"tag\">\r\n              {tag.name}\r\n            </button>\r\n          );\r\n        });\r\n\r\n        let result = (\r\n          <div className=\"game-container\">\r\n            <div\r\n              className=\"slug-bg\"\r\n              style={{ backgroundImage: `url(${data.background_image})` }}\r\n            ></div>\r\n\r\n            <div className=\"game-info\">\r\n              <div className=\"game-info-inner\">\r\n                <h1 className=\"title\">{data.name}</h1>\r\n                <div className=\"rating\">\r\n                  <i className=\"far fa-star\"></i>\r\n                  <p className=\"rating-text\">{data.rating}</p>\r\n                </div>\r\n                <div className=\"genres\">\r\n                  {data.genres.map((genre, index) => {\r\n                    return (\r\n                      <div className=\"genre\">\r\n                        <p className=\"genre-name\">{genre.name} </p>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n\r\n                <p className=\"esrb-rating\">{esrb}</p>\r\n              </div>\r\n              <div className=\"tags\">{tags}</div>\r\n\r\n              <div className=\"game-description\">{data.description_raw}</div>\r\n            </div>\r\n            <div className=\"game-stats\">\r\n              <div className=\"stats-inner\">\r\n                <div className=\"stats-ratings\">\r\n                  <p className=\"stats-subtitle\">Ratings</p>\r\n                  {data.ratings.map((rating, index) => {\r\n                    return (\r\n                      <div className=\" rating-text\">\r\n                        <p className=\"rating-title\">{rating.title} </p>\r\n                        <p className=\"rating-amount\">{rating.percent}%</p>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n\r\n                <div className=\"status\">\r\n                  <p className=\"stats-subtitle\">Stats</p>\r\n                  {statuses.map((status, index) => {\r\n                    return (\r\n                      <div key={index} className=\"status-text\">\r\n                        <h1 className=\"status-title\">{status[0]}</h1>\r\n                        <p className=\"status-amount\">{status[1]}</p>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"achievements-section\">\r\n                {this.state.achievementsLoaded\r\n                  ? this.state.achievements.map((item, index) => {\r\n                      return (\r\n                        <Achievements\r\n                          key={item.id}\r\n                          name={item.name}\r\n                          img={item.image}\r\n                        />\r\n                      );\r\n                    })\r\n                  : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n        this.setState({\r\n          gameDetails: result\r\n        });\r\n        return result;\r\n      });\r\n  }\r\n  render() {\r\n    return <div>{this.state.gameDetails}</div>;\r\n  }\r\n}\r\nexport default Game;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nimport Card from \"./Components/Card\";\nimport Game from \"./Components/Game\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\" component={Card} />\n\n      <Route exact path=\"/game/:gameID\" component={Game} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Styles/_config.scss\";\nimport \"./Styles/_style.scss\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter basename=\"/\">\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}